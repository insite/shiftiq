using System.Collections.Generic;

using Newtonsoft.Json;

namespace Shift.Common
{
    /// <summary>
    /// Represents a machine-readable format for specifying errors in HTTP API responses
    /// </summary>
    /// <remarks>
    /// Based on RFC 7807 - Problem Details for HTTP APIs. This is needed so we can use the same exception objects 
    /// across all .NET versions throughout the codebase.
    /// </remarks>
    public class Problem
    {
        /// <summary>
        /// A URI reference that identifies the problem type
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code generated by the origin server
        /// </summary>
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem
        /// </summary>
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem
        /// </summary>
        public string Instance { get; set; }

        /// <summary>
        /// Additional properties that provide more information about the problem
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, object> Extensions { get; set; }

        public Problem()
        {
            Extensions = new Dictionary<string, object>();

            Type = "about:blank";
        }

        public Problem(int statusCode) : this()
        {
            Status = statusCode;

            Title = GetDefaultTitle(statusCode);

            if (IsRegisteredHttpStatusCode(statusCode))
                Type = $"https://developer.mozilla.org/en-us/docs/web/http/reference/status/{Status}";
        }

        public Problem(int statusCode, string detail) : this(statusCode)
        {
            Detail = detail;
        }

        /// <summary>
        /// Converts a Problem to a JSON string
        /// </summary>
        public string Serialize()
        {
            return JsonConvert.SerializeObject(this, Formatting.None, new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            });
        }

        /// <summary>
        /// Creates a Problem from a JSON string
        /// </summary>
        public static Problem Deserialize(string json)
        {
            return JsonConvert.DeserializeObject<Problem>(json);
        }

        /// <summary>
        /// Returns true if the specified integer value represents a registered HTTP status code
        /// </summary>
        /// <param name="code">The integer value to check. Valid HTTP status codes range from 100 to 599.</param>
        /// <returns>
        /// <c>true</c> if the specified code is a registered HTTP status code; otherwise, <c>false</c>.
        /// </returns>
        /// <remarks>
        /// HTTP status codes are three-digit numbers grouped into five classes:
        /// - 1xx (100-199): Informational responses
        /// - 2xx (200-299): Successful responses
        /// - 3xx (300-399): Redirection messages
        /// - 4xx (400-499): Client error responses
        /// - 5xx (500-599): Server error responses
        /// This method validates against the official IANA HTTP Status Code Registry and common status codes defined in 
        /// various RFCs including RFC 7231, RFC 7232, RFC 7233, RFC 7235, RFC 7538, RFC 7540, RFC 7725, RFC 7694, and 
        /// RFC 8297.
        /// </remarks>
        /// <example>
        /// <code>
        /// // Check if 200 is a valid status code
        /// bool isValid = IsRegisteredHttpStatusCode(200);  // Returns true (OK)
        /// 
        /// // Check if 404 is a valid status code
        /// bool isNotFound = IsRegisteredHttpStatusCode(404);  // Returns true (Not Found)
        /// 
        /// // Check if 999 is a valid status code
        /// bool isInvalid = IsRegisteredHttpStatusCode(999);  // Returns false (not registered)
        /// </code>
        /// </example>
        /// <seealso cref="System.Net.HttpStatusCode"/>
        /// <seealso href="https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml">
        /// IANA HTTP Status Code Registry
        /// </seealso>
        public static bool IsRegisteredHttpStatusCode(int code)
        {
            return StatusCodeTitles.ContainsKey(code);
        }

        /// <summary>
        /// Returns the recommended reason phrase for a status code
        /// </summary>
        public string GetDefaultTitle(int code)
        {
            return StatusCodeTitles.TryGetValue(code, out string title)
                ? title
                : $"Unregistered status code: {code}";
        }

        private static readonly Dictionary<int, string> StatusCodeTitles = new Dictionary<int, string>
        {
            // 1xx Informational
            [100] = "Continue",
            [101] = "Switching Protocols",
            [102] = "Processing",
            [103] = "Early Hints",

            // 2xx Success
            [200] = "OK",
            [201] = "Created",
            [202] = "Accepted",
            [203] = "Non-Authoritative Information",
            [204] = "No Content",
            [205] = "Reset Content",
            [206] = "Partial Content",
            [207] = "Multi-Status",
            [208] = "Already Reported",
            [226] = "IM Used",

            // 3xx Redirection
            [300] = "Multiple Choices",
            [301] = "Moved Permanently",
            [302] = "Found",
            [303] = "See Other",
            [304] = "Not Modified",
            [305] = "Use Proxy",
            [306] = "Switch Proxy",
            [307] = "Temporary Redirect",
            [308] = "Permanent Redirect",

            // 4xx Client Error
            [400] = "Bad Request",
            [401] = "Unauthorized",
            [402] = "Payment Required",
            [403] = "Forbidden",
            [404] = "Not Found",
            [405] = "Method Not Allowed",
            [406] = "Not Acceptable",
            [407] = "Proxy Authentication Required",
            [408] = "Request Timeout",
            [409] = "Conflict",
            [410] = "Gone",
            [411] = "Length Required",
            [412] = "Precondition Failed",
            [413] = "Payload Too Large",
            [414] = "URI Too Long",
            [415] = "Unsupported Media Type",
            [416] = "Range Not Satisfiable",
            [417] = "Expectation Failed",
            [418] = "I'm a teapot",
            [421] = "Misdirected Request",
            [422] = "Unprocessable Entity",
            [423] = "Locked",
            [424] = "Failed Dependency",
            [425] = "Too Early",
            [426] = "Upgrade Required",
            [428] = "Precondition Required",
            [429] = "Too Many Requests",
            [431] = "Request Header Fields Too Large",
            [451] = "Unavailable For Legal Reasons",

            // 5xx Server Error
            [500] = "Internal Server Error",
            [501] = "Not Implemented",
            [502] = "Bad Gateway",
            [503] = "Service Unavailable",
            [504] = "Gateway Timeout",
            [505] = "HTTP Version Not Supported",
            [506] = "Variant Also Negotiates",
            [507] = "Insufficient Storage",
            [508] = "Loop Detected",
            [510] = "Not Extended",
            [511] = "Network Authentication Required"
        };
    }
}
